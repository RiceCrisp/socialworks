{"version":3,"sources":["admin/options.js"],"names":["jQuery","on","hoursCheck","prop","show","checkSVG","svgs","document","querySelectorAll","i","length","Vue","querySelector","data","el","value","id","viewbox","valid","validViewbox","computed","this","match","watch","newVal","ids","c","classList","remove","push","add","e","preventDefault","addClass","ajax","ajax_url","context","url","locals","method","action","res","success","val","click","svgString","next","prepend","checkOrder","prev","append","reader","FileReader","onload","result","replace","xml","parseXML","title","innerHTML","viewBox","getAttribute","paths","output","ii","outerHTML","slice","style","color","readAsText","target","files","triggers","tabbedTriggers","closest","find","oldVal","results","split","err"],"mappings":"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","file":"options.min.js","sourcesContent":["// Site Options\njQuery('.site-options #site_hours').on('change', function() {\n  hoursCheck();\n});\nvar hoursCheck = (function hoursCheck() {\n  if (jQuery('.site-options #site_hours').prop('checked')) {\n    jQuery('.site-options .hours').show();\n  } else {\n    jQuery('.site-options .hours').hide();\n  }\n  return hoursCheck;\n}());\n\n// Sitemap\njQuery('.sitemap-options .inline-option .button').on('click', function(e) {\n  e.preventDefault();\n  jQuery(this).addClass('disabled');\n  jQuery.ajax({\n    context: this,\n    url: locals.ajax_url,\n    method: 'post',\n    data: {\n      action: '_sw_generate_sitemap'\n    },\n    success: function(res) {\n      if (res.success) {\n        jQuery('.sitemap-options #last_mod').val(res.data);\n        jQuery('.sitemap-options #submit').click();\n      }\n    }\n  });\n});\n\n// SVG Manager\nfunction checkSVG() {\n  var svgs = document.querySelectorAll('.svg-options .sortable-item');\n  for (var i = 0; i < svgs.length; i++) {\n    if (svgs[i].querySelector('[v-model]')) {\n      new Vue({\n        el: svgs[i],\n        data: {\n          id: svgs[i].querySelector('[v-model=id]') ? svgs[i].querySelector('[v-model=id]').value : '',\n          viewbox: svgs[i].querySelector('[v-model=viewbox]') ? svgs[i].querySelector('[v-model=viewbox]').value : '',\n          paths: svgs[i].querySelector('[v-model=paths]') ? svgs[i].querySelector('[v-model=paths]').value : '',\n          valid: true\n        },\n        computed: {\n          validViewbox: function() {\n            var match = this.viewbox.match(/(-?\\d+(\\.\\d+)?) (-?\\d+(\\.\\d+)?) (-?\\d+(\\.\\d+)?) (-?\\d+(\\.\\d+)?)/g);\n            if (match && match[0] == this.viewbox) {\n              this.valid = true;\n              return this.viewbox;\n            }\n            else if (this.viewbox == '') {\n              this.valid = true;\n            }\n            else {\n              this.valid = false;\n            }\n          }\n        },\n        watch: {\n          id: function(newVal, oldVal) {\n            var ids = document.querySelectorAll('.svg-id');\n            var c = [];\n            for (var i = 0; i < ids.length; i++) {\n              ids[i].classList.remove('invalid');\n              if (newVal == ids[i].value) {\n                c.push(ids[i]);\n              }\n            }\n            if (c.length > 1) {\n              for (var i = 0; i < c.length; i++) {\n                c[i].classList.add('invalid');\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n}\ncheckSVG();\nvar svgString = '<li class=\"sortable-item svg\">\\\n  <div class=\"sortable-header\">\\\n    <span class=\"dashicons dashicons-move sortable-handle\"></span>\\\n    <span class=\"dashicons dashicons-trash sortable-delete\"></span>\\\n  </div>\\\n  <div class=\"sortable-content row\">\\\n    <div class=\"col-xs-6\">\\\n      <svg v-if=\"validViewbox\" v-bind:view-box.camel=\"validViewbox\" v-html=\"paths\"></svg>\\\n    </div>\\\n    <div class=\"col-xs-6\">\\\n      <label for=\"svg[00][id]\">ID</label>\\\n      <input id=\"svg[00][id]\" name=\"svg[00][id]\" type=\"text\" value=\"\" />\\\n      <label for=\"svg[00][title]\">Title</label>\\\n      <input id=\"svg[00][title]\" name=\"svg[00][title]\" type=\"text\" value=\"\" />\\\n      <label for=\"svg[00][viewbox]\">ViewBox</label>\\\n      <input id=\"svg[00][viewbox]\" v-bind:class=\"{invalid: !valid}\" name=\"svg[00][viewbox]\" type=\"text\" v-model=\"viewbox\" value=\"\" />\\\n    </div>\\\n    <div class=\"col-xs-12\">\\\n      <label for=\"svg[00][path]\">Paths</label>\\\n      <textarea id=\"svg[00][path]\" name=\"svg[00][path]\" v-model=\"paths\"></textarea>\\\n    </div>\\\n  </div>\\\n</li>';\njQuery('#add-svg-top').on('click', function(e) {\n  e.preventDefault();\n  jQuery(this).next().prepend(svgString);\n  checkOrder();\n  checkSVG();\n});\njQuery('#add-svg-bottom').on('click', function(e) {\n  e.preventDefault();\n  jQuery(this).prev().append(svgString);\n  checkOrder();\n  checkSVG();\n});\njQuery('#svg-import').on('change', function(e) {\n  var reader = new FileReader();\n  reader.onload = function() {\n    try {\n      var result = reader.result.replace(/[\\n\\t\\r]+/g, '');\n      var xml = jQuery.parseXML(result);\n      var svgs = xml.querySelectorAll('symbol') || xml.querySelectorAll('svg');\n      for (var i = svgs.length-1; i >= 0; i--) {\n        var id = svgs[i].id || '';\n        var title = svgs[i].querySelector('title').innerHTML || '';\n        var viewBox = svgs[i].getAttribute('viewBox') || '';\n        var paths = svgs[i].querySelectorAll('*:not(title)') || '';\n        var output = '';\n        for (var ii = 0; ii < paths.length; ii++) {\n          output += paths[ii].outerHTML.replace(/xmlns=\".*\" /g, '') + \"\\n\";\n        }\n        output = output.slice(0, -1);\n        jQuery('.sortable-container').prepend('<li class=\"sortable-item svg\">\\\n          <div class=\"sortable-header\">\\\n            <span class=\"dashicons dashicons-move sortable-handle\"></span>\\\n            <span class=\"dashicons dashicons-trash sortable-delete\"></span>\\\n          </div>\\\n          <div class=\"sortable-content row\">\\\n            <div class=\"col-xs-6\">\\\n              <svg v-if=\"validViewbox\" v-bind:view-box.camel=\"validViewbox\" v-html=\"paths\"></svg>\\\n            </div>\\\n            <div class=\"col-xs-6\">\\\n              <label for=\"svg[00][id]\">ID</label>\\\n              <input id=\"svg[00][id]\" name=\"svg[00][id]\" type=\"text\" value=\"' + id + '\" />\\\n              <label for=\"svg[00][title]\">Title</label>\\\n              <input id=\"svg[00][title]\" name=\"svg[00][title]\" type=\"text\" value=\"' + title + '\" />\\\n              <label for=\"svg[00][viewbox]\">ViewBox</label>\\\n              <input id=\"svg[00][viewbox]\" v-bind:class=\"{invalid: !valid}\" name=\"svg[00][viewbox]\" type=\"text\" v-model=\"viewbox\" value=\"' + viewBox + '\" />\\\n            </div>\\\n            <div class=\"col-xs-12\">\\\n              <label for=\"svg[00][path]\">Paths</label>\\\n              <textarea id=\"svg[00][path]\" name=\"svg[00][path]\" v-model=\"paths\">' + output + '</textarea>\\\n            </div>\\\n          </div>\\\n        </li>');\n        checkOrder();\n        checkSVG();\n      }\n      document.querySelector('.import-msg').innerHTML = 'Data successfully imported.';\n      document.querySelector('.import-msg').style.color = 'green';\n    }\n    catch (err) {\n      document.querySelector('.import-msg').innerHTML = 'There was an error reading the file. Confirm it is a .svg file and that the data is valid.';\n      document.querySelector('.import-msg').style.color = 'red';\n    }\n  };\n  reader.readAsText(e.target.files[0]);\n});\n\n// AMP\nif (document.querySelector('#triggers')) {\n  new Vue({\n    el: '#triggers',\n    data: {\n      triggers: '',\n    },\n    computed: {\n      tabbedTriggers: function() {\n        return this.triggers.replace(/\\n/g, '\\n  ');\n      }\n    }\n  });\n}\n\n// 301 Redirects\njQuery('.redirect-options .add button').on('click', function(e) {\n  e.preventDefault();\n  var container = jQuery(this).closest('.redirect');\n  var oldVal = jQuery(this).closest('.redirect').find('.old input').val();\n  var newVal = jQuery(this).closest('.redirect').find('.new input').val();\n  jQuery(this).closest('.redirect').find('.old input').val('');\n  jQuery(this).closest('.redirect').find('.new input').val('');\n  jQuery('.sortable-container').prepend('<li class=\"sortable-item redirect\">\\\n    <div class=\"old\">\\\n      <input name=\"redirects[00][old]\" type=\"text\" value=\"' + oldVal + '\" readonly />\\\n    </div>\\\n    <div class=\"new\">\\\n      <input name=\"redirects[00][new]\" type=\"text\" value=\"' + newVal + '\" readonly />\\\n    </div>\\\n    <span class=\"dashicons dashicons-move sortable-handle\"></span>\\\n    <span class=\"dashicons dashicons-trash sortable-delete\"></span>\\\n  </li>');\n  checkOrder();\n});\njQuery('#redirect-import').on('change', function(e) {\n  var reader = new FileReader();\n  reader.onload = function() {\n    try {\n      var results = reader.result.split(\"\\n\");\n      for (var i = 0; i < results.length; i++) {\n        var result = results[i].split(',');\n        var oldVal = result[0];\n        var newVal = result[1];\n        jQuery('.sortable-container').prepend('<li class=\"sortable-item redirect\">\\\n          <div class=\"old\">\\\n            <input name=\"redirects[00][old]\" type=\"text\" value=\"' + oldVal + '\" readonly />\\\n          </div>\\\n          <div class=\"new\">\\\n            <input name=\"redirects[00][new]\" type=\"text\" value=\"' + newVal + '\" readonly />\\\n          </div>\\\n          <span class=\"dashicons dashicons-move sortable-handle\"></span>\\\n          <span class=\"dashicons dashicons-trash sortable-delete\"></span>\\\n        </li>');\n        checkOrder();\n      }\n      document.querySelector('.import-msg').innerHTML = 'Data successfully imported.';\n      document.querySelector('.import-msg').style.color = 'green';\n    }\n    catch (err) {\n      document.querySelector('.import-msg').innerHTML = 'There was an error reading the file. Confirm it is a .csv file and that the data is valid (old url in first column and new url in second column).';\n      document.querySelector('.import-msg').style.color = 'red';\n    }\n  };\n  reader.readAsText(e.target.files[0]);\n});\n\n// function initMap() {\n//   if (!document.getElementById('site_map')) {\n//     return;\n//   }\n//   var map = new google.maps.Map(document.getElementById('site_map'), {\n//     center: {lat: 37.09, lng: -95.71},\n//     scrollwheel: false,\n//     zoom: 4\n//   });\n//   var input = document.getElementById('site_location');\n//   var locId = document.getElementById('site_location_id');\n//   var autocomplete = new google.maps.places.Autocomplete(input);\n//   autocomplete.bindTo('bounds', map);\n//   var infowindow = new google.maps.InfoWindow();\n//   var marker = new google.maps.Marker({\n//     map: map,\n//     anchorPoint: new google.maps.Point(0, -29)\n//   });\n//   var service = new google.maps.places.PlacesService(map);\n//\n//   var changePlace = function() {\n//     infowindow.close();\n//     marker.setVisible(false);\n//     var place = autocomplete.getPlace();\n//     if (!place && locId.value) {\n//       service.getDetails({placeId: locId.value}, function(place2, status) {\n//         place = place2;\n//         changeLoc();\n//       });\n//     } else if (place) {\n//       changeLoc();\n//     }\n//\n//     function changeLoc() {\n//       if (!place.geometry) {\n//         event.preventDefault();\n//         window.alert(\"No details available for input: '\" + place.name + \"'\");\n//         return;\n//       }\n//       if (place.geometry.viewport) {\n//         map.fitBounds(place.geometry.viewport);\n//       } else {\n//         map.setCenter(place.geometry.location);\n//         map.setZoom(15);\n//       }\n//       marker.setIcon(/** @type {google.maps.Icon} */({\n//         url: place.icon,\n//         size: new google.maps.Size(71, 71),\n//         origin: new google.maps.Point(0, 0),\n//         anchor: new google.maps.Point(17, 34),\n//         scaledSize: new google.maps.Size(35, 35)\n//       }));\n//       marker.setPosition(place.geometry.location);\n//       marker.setVisible(true);\n//       var address = '';\n//       if (place.address_components) {\n//         var number = '', street = '', room = '', city = '', state = '', zip = '', country = '';\n//         for (var i = 0; i < place.address_components.length; i++) {\n//           var addressType = place.address_components[i].types[0];\n//           if (addressType == 'street_number') {\n//             number = place.address_components[i].short_name;\n//           } else if (addressType == 'route') {\n//             street = place.address_components[i].short_name;\n//           } else if (addressType == 'subpremise') {\n//             room = '#' + place.address_components[i].long_name;\n//           } else if (addressType == 'locality') {\n//             city = place.address_components[i].long_name;\n//           } else if (addressType == 'administrative_area_level_1') {\n//             state = place.address_components[i].short_name;\n//           } else if (addressType == 'postal_code') {\n//             zip = place.address_components[i].short_name;\n//           } else if (addressType == 'country') {\n//             country = place.address_components[i].short_name;\n//           }\n//         }\n//         address = number + ' ' + street + ' ' + room + '<br>' + city + ', ' + state + ' ' + zip;\n//       }\n//       infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);\n//       infowindow.open(map, marker);\n//       document.getElementById('site_location_id').value = place.place_id;\n//       // document.getElementById('theme_location_name').value = place.name;\n//       document.getElementById('site_location_street').value = number + ' ' + street + ' ' + room;\n//       document.getElementById('site_location_city').value = city;\n//       document.getElementById('site_location_state').value = state;\n//       document.getElementById('site_location_zip').value = zip;\n//       document.getElementById('site_location_country').value = country;\n//       // document.getElementById('theme_location_readable').value = address;\n//     }\n//   };\n//   autocomplete.addListener('place_changed', changePlace);\n//   // Show place when page loads\n//   google.maps.event.addListenerOnce(map, 'idle', changePlace);\n// }\n"]}